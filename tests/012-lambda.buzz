import "std";

test "Lambda/Anonymous functions" {
    Function(int n) > int mul = fun (int n) > int => n * 2;

    std.assert(mul(1) == 2, message: "called a lambda function");
}

fun callThis(Function(int n) > int fn, int arg) > int {
    return fn(arg);
}

test "Function as arguments" {
    std.assert((fun (int n) > int { return n * n; })(10) == 100, message: "called anonymous function");
    std.assert((fun (int n) > int => n * n)(10) == 100, message: "called lambda function");
    std.assert(callThis(fun (int n) > int => n * 2, arg: 2) == 4, message: "called a function from a function");
}

fun mul(int a, int b) > int => a * b;

test "Any function can be an arrow function" {
    std.assert(mul(a: 2, b: 2) == 4, message: "arrow function");
}